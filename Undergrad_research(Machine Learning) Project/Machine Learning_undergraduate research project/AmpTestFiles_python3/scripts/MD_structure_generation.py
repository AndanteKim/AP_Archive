""" This script generates starting files for generating training sets using Dr.Lei's script (uses optimization). A plot of the energies of the starting
configurations is also generated by the script. The ideal starting file will have a distribution that is slightly skewed to the left. """

import os
from ase import Atoms, Atom, units
import ase.io
from ase.calculators.emt import EMT
from ase.build import fcc110
from ase.md.velocitydistribution import MaxwellBoltzmannDistribution
from ase.md import VelocityVerlet
from ase.constraints import FixAtoms
import tsase
import numpy as np
import sys
from sys import argv
from amp import Amp
from amp.descriptor.gaussian import Gaussian
from amp.descriptor.zernike import Zernike
from amp.model.neuralnetwork import NeuralNetwork
from amp.utilities import TrainingConvergenceError
from amp.regression import Regressor
from scipy.optimize import basinhopping
import time
import andersen

import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import numpy

### there seems to be a threshold energy value for FIRE to actually work around -0.01 energy, don't generate too many configs with energy higher than that. 	
## implement different heating schedules (step through initial temperatures faster -> more data points at higher temperaure)
# issues with linear increase of temp: still not providing enough data points at very high energy > -2.5, able to train with ~ 3000 points, much better performance than before.
# sqrt increase of temp seems to work a little better. More uniform data obtained. 

def generate_data_MD(filename, mode, structure, initial_temperature, final_target_temperature, timestep, steps_structure, forcemax, maxstep, numberofstructures):
    """ This function runs molecular dynamics on a starting con file at various temperatures. a trajectory file is written to based on user input. """
    # the difference in final and inital temp is used for sqrt mode.
    temp_difference = final_target_temperature - initial_temperature
    # if the mode is linear, the temperature is incremented by temp_step after recording each structure.
    temp_step = temp_difference / numberofstructures
    # variable keeps track of temperature MD is running at.
    temp = initial_temperature
    # convert the tempperature to the correct units.
    temp_converted = initial_temperature * units.kB
    potential_energies = []
	#create new testing/training set
    traj = ase.io.Trajectory(filename, 'w')
    lj = tsase.calculators.lj(cutoff=15.0)
	#read in randomly generated starting structure
    atoms = tsase.io.read_con(structure)
    atoms.set_calculator(lj)
    # give the atoms object an initial momentum to run MD
    MaxwellBoltzmannDistribution(atoms, temp_converted)  
    # use andersen thermostat to control temperature of the simulation.  
    therm = andersen.nvtandersen(atoms, timestep, temp_converted)
	#find optimum before starting MD
    opt = ase.optimize.FIRE(atoms,maxmove = maxstep)
    opt.run(fmax=forcemax)
	#run dynamics 
    for config in range(numberofstructures):
        # run MD steps_structure number of steps.
        for step in range(steps_structure):
            therm.step(atoms.get_forces())
        # record the configuration obtained.
        traj.write(atoms)
        pe = atoms.get_potential_energy()
        potential_energies.append(pe)
        if mode == 'sqrt':
            temp = initial_temperature + temp_difference * numpy.sqrt(((config+1)*1.0)/numberofstructures) 
        elif mmode == 'linear':
            temp = temp + temp_step
        else:
            print('invalid mode selected.')
            sys.exit()
        # change the thermostat's temperature. 
        therm.set_temperature(temp * units.kB)
    print(potential_energies)
    # plot the potential energies of all the configs obtained.     
    plot(potential_energies, filename.replace('.traj','.png'))

def plot(pe_array, filename):
    """ This function plots a histogram of the potential energies of the configs """
    plt.figure()
    plt.hist(pe_array)
    plt.savefig(filename)


starting_structure = 'lj8_carbon.con'
numberofstructures = 50 # the number of structures you want in the final trajectory
initial_temp = 4000 # in kelvin
target_temp = 8000 # in kelvin
timestep = 0.1 * units.fs # in femtoseconds
steps_per_structure = 500 # each structure will be recorded after this many MD steps at a particular temperature. 
forcemax = 0.01
maxstep = 0.1
mode = 'sqrt' # available modes for stepping through temperature are 'linear' and 'sqrt'

def run_test():
    filename = 'test_carbon_4000-8000_linear'
    for i in range(3):
        generate_data_MD(filename+'_'+str(i+1)+'.traj', mode, starting_structure, initial_temp, target_temp, timestep, steps_per_structure, forcemax, maxstep, numberofstructures)

run_test()
